class Solution {
public:
    void bfs(vector<vector<char>>&grid,int i,int j,vector<vector<bool>>&vis){
      int n=grid.size();
      int m=grid[0].size();
        queue<pair<int,int>>q;
        q.push({i,j});
        vis[i][j]=1;
        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;
            q.pop();
            int rr[4]={-1,0,+1,0};
            int cc[4]={0,+1,0,-1};
            for(int i=0;i<4;i++){
                int nr=r+rr[i];
                int nc=c+cc[i];
                if(nr>=0 && nr<n && nc>=0 &&nc<m && !vis[nr][nc]&& grid[nr][nc]=='1'){
                    q.push({nr,nc});
                    vis[nr][nc]=1;
                }
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int c=0;
     vector<vector<bool>>vis(n,vector<bool>(m,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!vis[i][j] && grid[i][j]=='1'){
           
                bfs(grid,i,j,vis);
                     c++;
            }
        }
    }
    return c;
    }
};
